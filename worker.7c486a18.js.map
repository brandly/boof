{"version":3,"sources":["util.ts","program.ts","worker.tsx"],"names":[],"mappings":"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","file":"worker.7c486a18.js","sourceRoot":"../src","sourcesContent":["export const includes = (list, val) => list.indexOf(val) !== -1\n\nexport function getUrlHash(): { [key: string]: string } {\n  return window.location.hash\n    .slice(1)\n    .split('&')\n    .reduce((out, pair) => {\n      const [key, val] = decodeURIComponent(pair).split('=')\n      out[key] = val\n      return out\n    }, {})\n}\n","import { includes } from './util'\n\nconst maxCellVal = 256\n\ninterface State {\n  index: number\n  pointer: number\n  tape: number[]\n  output: number[]\n}\n\ninterface Token {\n  char: string\n  line: number\n  column: number\n}\n\ninterface Log {\n  before: State\n  token: Token\n  after: State\n}\n\nconst valid = '><+-[].,'\nconst tokenize = (src: string) => {\n  const chars = src.split('')\n\n  let line = 0\n  let column = 0\n  const tokens = chars.map((char, i) => {\n    const t = {\n      char,\n      line,\n      column\n    }\n\n    if (char === '\\n') {\n      column = 0\n      line++\n    } else {\n      column++\n    }\n    return t\n  })\n\n  return tokens.filter(t => includes(valid, t.char))\n}\n\nexport class Program {\n  src: string\n  tokens: Token[]\n  state: State\n  history: Log[]\n\n  constructor(src: string) {\n    this.src = src\n    this.tokens = tokenize(src)\n    this.state = {\n      index: 0,\n      pointer: 0,\n      tape: [0],\n      output: []\n    }\n    this.history = []\n  }\n\n  run(input: string = '', debug: boolean = false) {\n    const inputChars = input.split('')\n    while (!this.hasFinished()) {\n      let before = this.state\n      let token = this.tokens[this.state.index]\n      this.state = advance(consume(this.tokens, this.state, inputChars))\n      this.history.push({\n        before,\n        token,\n        after: this.state\n      })\n      debug &&\n        console.log(\n          this.src[this.state.index - 1],\n          '\\n',\n          this.state.tape\n            .map((c, i) => (i === this.state.pointer ? `(${c})` : c.toString()))\n            .join(' ')\n        )\n    }\n    return this\n  }\n\n  print() {\n    return this.state.output.map(char => String.fromCharCode(char)).join('')\n  }\n\n  hasFinished() {\n    return this.state.index >= this.tokens.length\n  }\n}\n\nfunction advance(s: State): State {\n  return { ...s, index: s.index + 1 }\n}\nfunction consume(tokens: Token[], state: State, input: string[]): State {\n  const { char } = tokens[state.index]\n  const { tape, pointer, output } = state\n\n  switch (char) {\n    case '>': {\n      const newTape = tape.slice(0)\n      const newPointer = pointer + 1\n      newTape[newPointer] = newTape[newPointer] || 0\n      return {\n        ...state,\n        tape: newTape,\n        pointer: newPointer\n      }\n    }\n    case '<': {\n      const updated = pointer - 1\n      if (updated < 0) {\n        // TODO: improve this error, provide inline feedback\n        throw new Error('Invalid tape pointer')\n      }\n      return {\n        ...state,\n        pointer: updated\n      }\n    }\n    case '+': {\n      const newTape = tape.slice(0)\n      newTape[pointer] = ((newTape[pointer] || 0) + 1) % maxCellVal\n      return {\n        ...state,\n        tape: newTape\n      }\n    }\n    case '-': {\n      const newTape = tape.slice(0)\n      newTape[pointer] = (newTape[pointer] || 0) - 1\n      if (newTape[pointer] < 0) {\n        newTape[pointer] = newTape[pointer] + maxCellVal\n      }\n      return {\n        ...state,\n        tape: newTape\n      }\n    }\n    case '[': {\n      if (!tape[pointer]) {\n        let depth = 1\n        let { index } = state\n        while (depth > 0) {\n          index += 1\n          if (tokens[index].char === '[') {\n            depth += 1\n          } else if (tokens[index].char === ']') {\n            depth -= 1\n          }\n        }\n        return {\n          ...state,\n          index\n        }\n      } else {\n        return state\n      }\n    }\n    case ']': {\n      let depth = 1\n      let { index } = state\n      while (depth > 0) {\n        index -= 1\n        if (tokens[index].char === '[') {\n          depth -= 1\n        } else if (tokens[index].char === ']') {\n          depth += 1\n        }\n      }\n      index -= 1\n      return {\n        ...state,\n        index\n      }\n    }\n    case '.': {\n      return {\n        ...state,\n        output: output.concat(tape[pointer] || 0)\n      }\n    }\n    case ',': {\n      const val = (input.shift() || '\\0').charCodeAt(0)\n      const newTape = tape.slice(0)\n      newTape[pointer] = val\n      return {\n        ...state,\n        tape: newTape\n      }\n    }\n    default:\n      return state\n  }\n}\n","import { Program } from './program'\n\nself.onmessage = e => {\n  const { src, input } = e.data\n  const program = new Program(src)\n  program.run(input)\n  self.postMessage({\n    output: program.print(),\n    hasFinished: program.hasFinished(),\n    summaries: summariesPerLine(program.history),\n    state: program.state\n  })\n}\n\nfunction summarize(history: Log[]): string {\n  const { before } = history[0]\n  const { after } = history[history.length - 1]\n\n  const cellChanges: string[] = []\n  for (let i = 0; i < Math.max(before.tape.length, after.tape.length); i++) {\n    const diff: number = after.tape[i] - (before.tape[i] || 0)\n    const verb = diff > 0 ? 'Add' : 'Subtract'\n    const preposition = diff > 0 ? 'to' : 'from'\n    cellChanges.push(\n      diff === 0 ? '' : `${verb} ${Math.abs(diff)} ${preposition} c${i}`\n    )\n  }\n\n  const prints: string = after.output\n    .slice(before.output.length)\n    .map(char => String.fromCharCode(char))\n    .join('')\n  const printed: string = prints.length ? `Print ${JSON.stringify(prints)}` : ''\n  return cellChanges\n    .concat(printed)\n    .filter(Boolean)\n    .join('. ')\n}\n\nfunction changeSequencesPerLine(history: Log[]): Log[][][] {\n  return history.reduce((result, log, index) => {\n    if (index === 0 || log.token.line !== history[index - 1].token.line) {\n      if (!result[log.token.line]) result[log.token.line] = []\n      result[log.token.line].push([])\n    }\n    const forLine = result[log.token.line]\n    forLine[forLine.length - 1].push(log)\n    return result\n  }, [])\n}\n\nconst nbsp = '\\u00A0'\nfunction summariesPerLine(history: Log[]): string[] {\n  return changeSequencesPerLine(history).map(line => {\n    const summaries = line.map(seq => summarize(seq))\n    const summaryToCount: { [summary: string]: number } = summaries.reduce(\n      (map, summary) => {\n        if (!summary) return map\n        if (!map[summary]) map[summary] = 0\n        map[summary] += 1\n        return map\n      },\n      {}\n    )\n    return (\n      Object.keys(summaryToCount)\n        .map(\n          summary =>\n            `${summary}` +\n            (summaryToCount[summary] > 1 ? ` x${summaryToCount[summary]}` : '')\n        )\n        .join(' ~~ ') || nbsp\n    )\n  })\n}\n"]}