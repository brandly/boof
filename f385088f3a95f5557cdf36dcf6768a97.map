{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAM,QAAQ,UAAd;AACA,IAAM,WAAW,SAAX,QAAW,CAAC,GAAD,EAAY;AAC3B,QAAM,QAAQ,IAAI,KAAJ,CAAU,EAAV,CAAd;AAEA,QAAI,OAAO,CAAX;AACA,QAAI,SAAS,CAAb;AACA,QAAM,SAAS,MAAM,GAAN,CAAU,UAAC,IAAD,EAAO,CAAP,EAAQ;AAC/B,YAAM,IAAI;AACR,kBAAI,IADI;AAER,kBAAI,IAFI;AAGR,oBAAM;AAHE,SAAV;AAMA,YAAI,SAAS,IAAb,EAAmB;AACjB,qBAAS,CAAT;AACA;AACD,SAHD,MAGO;AACL;AACD;AACD,eAAO,CAAP;AACD,KAdc,CAAf;AAgBA,WAAO,OAAO,MAAP,CAAc,UAAA,CAAA,EAAC;AAAI,eAAA,MAAM,OAAN,CAAc,EAAE,IAAhB,MAA0B,CAAC,CAA3B;AAA4B,KAA/C,CAAP;AACD,CAtBD;AAwBA,IAAA,UAAA,aAAA,YAAA;AAME,aAAA,OAAA,CAAa,GAAb,EAAwB;AACtB,aAAK,GAAL,GAAW,GAAX;AACA,aAAK,MAAL,GAAc,SAAS,GAAT,CAAd;AACA,aAAK,KAAL,GAAa;AACX,mBAAO,CADI;AAEX,qBAAS,CAFE;AAGX,kBAAM,CAAC,CAAD,CAHK;AAIX,oBAAQ;AAJG,SAAb;AAMA,aAAK,OAAL,GAAe,EAAf;AACD;AAED,YAAA,SAAA,CAAA,GAAA,GAAA,UAAK,KAAL,EAAoB,KAApB,EAA0C;AAA1C,YAAA,QAAA,IAAA;AAAoB,YAAA,UAAA,KAAA,CAAA,EAAA;AAAA,oBAAA,KAAA;AAAsB;AACxC,YAAM,aAAa,MAAM,KAAN,CAAY,EAAZ,CAAnB;AACA,eAAO,CAAC,KAAK,WAAL,EAAR,EAA4B;AAC1B,gBAAI,SAAS,KAAK,KAAlB;AACA,gBAAI,QAAQ,KAAK,MAAL,CAAY,KAAK,KAAL,CAAW,KAAvB,CAAZ;AACA,iBAAK,KAAL,GAAa,QAAQ,QAAQ,KAAK,GAAb,EAAkB,KAAK,KAAvB,EAA8B,UAA9B,CAAR,CAAb;AACA,iBAAK,OAAL,CAAa,IAAb,CAAkB;AAChB,wBAAM,MADU;AAEhB,uBAAK,KAFW;AAGhB,uBAAO,KAAK;AAHI,aAAlB;AAKA,qBAAS,QAAQ,GAAR,CACP,KAAK,GAAL,CAAS,KAAK,KAAL,CAAW,KAAX,GAAmB,CAA5B,CADO,EAEP,IAFO,EAGP,KAAK,KAAL,CAAW,IAAX,CACG,GADH,CACO,UAAC,CAAD,EAAI,CAAJ,EAAK;AACR,uBAAA,MAAM,MAAK,KAAL,CAAW,OAAjB,GAA2B,MAAI,CAAJ,GAAK,GAAhC,GAAsC,EAAE,QAAF,EAAtC;AAAkD,aAFtD,EAIG,IAJH,CAIQ,GAJR,CAHO,CAAT;AASD;AACD,eAAO,IAAP;AACD,KAtBD;AAwBA,YAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,eAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,GAAlB,CAAsB,UAAA,IAAA,EAAI;AAAI,mBAAA,OAAO,YAAP,CAAoB,IAApB,CAAA;AAAyB,SAAvD,EAAyD,IAAzD,CAA8D,EAA9D,CAAP;AACD,KAFD;AAIA,YAAA,SAAA,CAAA,WAAA,GAAA,YAAA;AACE,eAAO,KAAK,KAAL,CAAW,KAAX,IAAoB,KAAK,GAAL,CAAS,MAApC;AACD,KAFD;AAGF,WAAA,OAAA;AAjDA,CAAA,EAAA;AAmDA;AACE,QAAM,MAAM,OAAZ;AAEA;AACA,QAAM,aAAa,4GAAnB;AAEA;AACA;AACA,QAAM,IAAI,IAAI,OAAJ,CAAY,UAAZ,CAAV;AACA,YAAQ,GAAR,CAAY,EAAE,GAAF,CAAM,EAAN,EAAU,KAAV,EAAZ;AACD;AAED,SAAA,OAAA,CAAkB,CAAlB,EAA0B;AAAI,WAAM,SAAA,EAAA,EAAM,CAAN,EAAO,EAAE,OAAO,EAAE,KAAF,GAAU,CAAnB,EAAP,CAAN;AAAqC;AACnE,SAAA,OAAA,CAAkB,GAAlB,EAA+B,KAA/B,EAA6C,KAA7C,EAA4D;AAC1D,QAAM,OAAO,IAAI,MAAM,KAAV,CAAb;AACQ,QAAA,OAAA,MAAA,IAAA;AAAA,QAAM,UAAA,MAAA,OAAN;AAAA,QAAe,SAAA,MAAA,MAAf;AAER,YAAQ,IAAR;AACE,aAAK,GAAL;AAAU;AACR,oBAAM,UAAU,KAAK,KAAL,CAAW,CAAX,CAAhB;AACA,oBAAM,aAAa,UAAU,CAA7B;AACA,wBAAQ,UAAR,IAAsB,QAAQ,UAAR,KAAuB,CAA7C;AACA,uBAAM,SAAA,EAAA,EACD,KADC,EACI,EACR,MAAM,OADE,EAER,SAAS,UAAU,CAFX,EADJ,CAAN;AAKD;AACD,aAAK,GAAL;AACE,mBAAM,SAAA,EAAA,EACD,KADC,EACI,EACR,SAAS,UAAU,CADX,EADJ,CAAN;AAIF,aAAK,GAAL;AAAU;AACR,oBAAM,UAAU,KAAK,KAAL,CAAW,CAAX,CAAhB;AACA,wBAAQ,OAAR,IAAmB,CAAC,QAAQ,OAAR,KAAoB,CAArB,IAA0B,CAA7C;AACA,uBAAM,SAAA,EAAA,EACD,KADC,EACI,EACR,MAAM,OADE,EADJ,CAAN;AAID;AACD,aAAK,GAAL;AAAU;AACR,oBAAM,UAAU,KAAK,KAAL,CAAW,CAAX,CAAhB;AACA,wBAAQ,OAAR,IAAmB,CAAC,QAAQ,OAAR,KAAoB,CAArB,IAA0B,CAA7C;AACA,uBAAM,SAAA,EAAA,EACD,KADC,EACI,EACR,MAAM,OADE,EADJ,CAAN;AAID;AACD,aAAK,GAAL;AAAU;AACR,oBAAI,CAAC,KAAK,OAAL,CAAL,EAAoB;AAClB,wBAAI,QAAQ,CAAZ;AACM,wBAAA,QAAA,MAAA,KAAA;AACN,2BAAO,QAAQ,CAAf,EAAkB;AAChB,iCAAS,CAAT;AACA,4BAAI,IAAI,KAAJ,MAAe,GAAnB,EAAwB;AACtB,qCAAS,CAAT;AACD,yBAFD,MAEO,IAAI,IAAI,KAAJ,MAAe,GAAnB,EAAwB;AAC7B,qCAAS,CAAT;AACD;AACF;AACD,2BAAM,SAAA,EAAA,EACD,KADC,EACI,EACR,OAAK,KADG,EADJ,CAAN;AAID,iBAfD,MAeO;AACL,2BAAO,KAAP;AACD;AACF;AACD,aAAK,GAAL;AAAU;AACR,oBAAI,QAAQ,CAAZ;AACM,oBAAA,QAAA,MAAA,KAAA;AACN,uBAAO,QAAQ,CAAf,EAAkB;AAChB,6BAAS,CAAT;AACA,wBAAI,IAAI,KAAJ,MAAe,GAAnB,EAAwB;AACtB,iCAAS,CAAT;AACD,qBAFD,MAEO,IAAI,IAAI,KAAJ,MAAe,GAAnB,EAAwB;AAC7B,iCAAS,CAAT;AACD;AACF;AACD,yBAAS,CAAT;AACA,uBAAM,SAAA,EAAA,EACD,KADC,EACI,EACR,OAAK,KADG,EADJ,CAAN;AAID;AACD,aAAK,GAAL;AAAU;AACR,uBAAM,SAAA,EAAA,EACD,KADC,EACI,EACR,QAAQ,OAAO,MAAP,CAAc,KAAK,MAAM,OAAX,KAAuB,CAArC,CADA,EADJ,CAAN;AAID;AACD,aAAK,GAAL;AAAU;AACR,oBAAM,MAAM,CAAC,MAAM,KAAN,MAAiB,IAAlB,EAAwB,UAAxB,CAAmC,CAAnC,CAAZ;AACA,oBAAM,UAAU,KAAK,KAAL,CAAW,CAAX,CAAhB;AACA,wBAAQ,OAAR,IAAmB,GAAnB;AACA,uBAAM,SAAA,EAAA,EACD,KADC,EACI,EACR,MAAM,OADE,EADJ,CAAN;AAID;AACD;AACE,mBAAO,KAAP;AArFJ;AAuFD","file":"f385088f3a95f5557cdf36dcf6768a97.map","sourcesContent":["import * as React from 'react'\n\ninterface State {\n  index: number,\n  pointer: number,\n  tape: number[],\n  output: number[]\n}\n\ninterface Token {\n  char: string,\n  line: number,\n  column: number\n}\n\ninterface Log {\n  before: State,\n  token: Token,\n  after: State\n}\n\nconst valid = '><+-[].,'\nconst tokenize = (src: string) => {\n  const chars = src.split('')\n\n  let line = 0\n  let column = 0\n  const tokens = chars.map((char, i) => {\n    const t = {\n      char,\n      line,\n      column\n    }\n\n    if (char === '\\n') {\n      column = 0\n      line++\n    } else {\n      column++\n    }\n    return t\n  })\n\n  return tokens.filter(t => valid.indexOf(t.char) !== -1)\n}\n\nclass Program {\n  src: string;\n  tokens: Token[];\n  state: State;\n  history: Log[];\n\n  constructor (src: string) {\n    this.src = src\n    this.tokens = tokenize(src)\n    this.state = {\n      index: 0,\n      pointer: 0,\n      tape: [0],\n      output: []\n    }\n    this.history = []\n  }\n\n  run (input: string, debug: boolean = false) {\n    const inputChars = input.split('')\n    while (!this.hasFinished()) {\n      let before = this.state\n      let token = this.tokens[this.state.index]\n      this.state = advance(consume(this.src, this.state, inputChars))\n      this.history.push({\n        before,\n        token,\n        after: this.state\n      })\n      debug && console.log(\n        this.src[this.state.index - 1],\n        '\\n',\n        this.state.tape\n          .map((c, i) =>\n            i === this.state.pointer ? `(${c})` : c.toString()\n          )\n          .join(' ')\n       )\n    }\n    return this\n  }\n\n  print () {\n    return this.state.output.map(char => String.fromCharCode(char)).join('')\n  }\n\n  hasFinished () {\n    return this.state.index >= this.src.length\n  }\n}\n\n{\n  const cat = ',[.,]'\n\n  // [ 72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 10 ]\n  const helloWorld = '++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.'\n\n  // const p = new Program(cat)\n  // console.log(JSON.stringify(p.run('abc', true).history, null, 2))\n  const p = new Program(helloWorld)\n  console.log(p.run('').print())\n}\n\nfunction advance (s: State) { return { ...s, index: s.index + 1 } }\nfunction consume (src: string, state: State, input: string[]) {\n  const char = src[state.index]\n  const { tape, pointer, output } = state\n\n  switch (char) {\n    case '>': {\n      const newTape = tape.slice(0)\n      const newPointer = pointer + 1\n      newTape[newPointer] = newTape[newPointer] || 0\n      return {\n        ...state,\n        tape: newTape,\n        pointer: pointer + 1\n      }\n    }\n    case '<':\n      return {\n        ...state,\n        pointer: pointer - 1\n      }\n    case '+': {\n      const newTape = tape.slice(0)\n      newTape[pointer] = (newTape[pointer] || 0) + 1\n      return {\n        ...state,\n        tape: newTape\n      }\n    }\n    case '-': {\n      const newTape = tape.slice(0)\n      newTape[pointer] = (newTape[pointer] || 0) - 1\n      return {\n        ...state,\n        tape: newTape\n      }\n    }\n    case '[': {\n      if (!tape[pointer]) {\n        let depth = 1\n        let { index } = state\n        while (depth > 0) {\n          index += 1\n          if (src[index] === '[') {\n            depth += 1\n          } else if (src[index] === ']') {\n            depth -= 1\n          }\n        }\n        return {\n          ...state,\n          index\n        }\n      } else {\n        return state\n      }\n    }\n    case ']': {\n      let depth = 1\n      let { index } = state\n      while (depth > 0) {\n        index -= 1\n        if (src[index] === '[') {\n          depth -= 1\n        } else if (src[index] === ']') {\n          depth += 1\n        }\n      }\n      index -= 1\n      return {\n        ...state,\n        index\n      }\n    }\n    case '.': {\n      return {\n        ...state,\n        output: output.concat(tape[state.pointer] || 0)\n      }\n    }\n    case ',': {\n      const val = (input.shift() || '\\0').charCodeAt(0)\n      const newTape = tape.slice(0)\n      newTape[pointer] = val\n      return {\n        ...state,\n        tape: newTape\n      }\n    }\n    default:\n      return state\n  }\n}\n"]}